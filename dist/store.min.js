class t{constructor(t={},s={}){this.__state=t,this.actions=s,this.subscribers=[]}subscribe(t,s=[]){const e=Array.isArray(s)?s:Object.keys(s);t.setState(this.getSelectedState(e)),this.subscribers.push({target:t,props:e})}get state(){return this.__state}setState(t){this.__state={...this.state,...t},this.notify()}getSelectedState(t){return t.reduce(((t,s)=>(s in this.state&&(t[s]=this.state[s]),t)),{})}notify(){this.subscribers.forEach((({target:t,props:s})=>{t.render(this.getSelectedState(s))}))}dispatch(t,...s){const e=this.actions[t];if(!e)throw new Error(`action "${t}" does not exist`);e.bind(this)(...s)}}export{t as default};
